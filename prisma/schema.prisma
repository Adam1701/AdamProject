generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  passwordHash  String
  name          String
  role          Role         @default(CUSTOMER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sessions      Session[]
  orders        Order[]
  cart          Cart?
}

enum Role {
  ADMIN
  SELLER
  CUSTOMER
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Product {
  id          String          @id @default(cuid())
  externalId  String?         @unique
  name        String
  brand       String
  category    Category
  productUrl  String?
  price       Float?
  currency    String          @default("EUR")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  variants    Variant[]
}

enum Category {
  men
  women
  kids
}

model Variant {
  id         String     @id @default(cuid())
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  colorName  String
  images     Image[]
  stocks     Stock[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Image {
  id        String   @id @default(cuid())
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String
  url       String
  sort      Int      @default(0)
}

model Size {
  id        String     @id @default(cuid())
  label     String
  category  Category
  stocks    Stock[]
  cartItems CartItem[]
  orderItems OrderItem[]
  @@unique([label, category])
}

model Stock {
  id         String   @id @default(cuid())
  variant    Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId  String
  size       Size     @relation(fields: [sizeId], references: [id])
  sizeId     String
  quantity   Int      @default(0)
  @@unique([variantId, sizeId])
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id         String   @id @default(cuid())
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String
  variant    Variant  @relation(fields: [variantId], references: [id])
  variantId  String
  size       Size     @relation(fields: [sizeId], references: [id])
  sizeId     String
  quantity   Int      @default(1)
  @@unique([cartId, variantId, sizeId])
}

model Order {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  status       OrderStatus  @default(PENDING)
  total        Float        @default(0)
  currency     String       @default("EUR")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  items        OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  variant    Variant  @relation(fields: [variantId], references: [id])
  variantId  String
  size       Size     @relation(fields: [sizeId], references: [id])
  sizeId     String
  unitPrice  Float
  quantity   Int      @default(1)
}
